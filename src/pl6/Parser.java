
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package pl6;

import java_cup.runtime.*;
import java.io.*;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\015\002\000\002\002" +
    "\004\000\002\016\002\000\002\017\002\000\002\003\010" +
    "\000\002\004\004\000\002\004\002\000\002\005\005\000" +
    "\002\020\002\000\002\005\005\000\002\012\004\000\002" +
    "\013\003\000\002\013\003\000\002\014\006\000\002\014" +
    "\002\000\002\006\004\000\002\006\002\000\002\007\003" +
    "\000\002\007\006\000\002\007\007\000\002\011\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\006\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\020\000\001\002\000\004\002\100\001" +
    "\002\000\004\020\ufffe\001\002\000\004\020\010\001\002" +
    "\000\004\002\uffff\001\002\000\020\003\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\025\ufffd\026\ufffd\031\ufffd\001\002\000\020" +
    "\003\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\031" +
    "\ufffa\001\002\000\020\003\014\020\ufff0\021\ufff0\022\ufff0" +
    "\025\020\026\017\031\ufff0\001\002\000\020\003\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\025\ufffb\026\ufffb\031\ufffb\001\002" +
    "\000\004\004\ufff8\001\002\000\012\020\ufffe\021\034\022" +
    "\033\031\031\001\002\000\004\031\027\001\002\000\006" +
    "\016\ufff4\031\ufff4\001\002\000\006\016\ufff5\031\ufff5\001" +
    "\002\000\006\016\023\031\ufff2\001\002\000\004\031\ufff6" +
    "\001\002\000\004\030\024\001\002\000\004\017\025\001" +
    "\002\000\006\016\023\031\ufff2\001\002\000\004\031\ufff3" +
    "\001\002\000\004\004\030\001\002\000\020\003\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\025\ufff9\026\ufff9\031\ufff9\001\002" +
    "\000\022\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\013\uffec\015\uffec\001\002\000\012\020\ufff1\021\ufff1" +
    "\022\ufff1\031\ufff1\001\002\000\004\014\072\001\002\000" +
    "\014\002\ufffc\020\ufffc\021\ufffc\022\ufffc\031\ufffc\001\002" +
    "\000\004\013\037\001\002\000\012\020\uffef\021\uffef\022" +
    "\uffef\031\uffef\001\002\000\020\005\043\006\040\012\045" +
    "\014\042\027\047\030\041\031\031\001\002\000\020\005" +
    "\043\006\040\012\045\014\042\027\047\030\041\031\031" +
    "\001\002\000\020\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\015\uffe3\001\002\000\020\005\043\006\040" +
    "\012\045\014\042\027\047\030\041\031\031\001\002\000" +
    "\020\005\043\006\040\012\045\014\042\027\047\030\041" +
    "\031\031\001\002\000\020\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\015\uffeb\001\002\000\004\014\063" +
    "\001\002\000\016\004\050\005\052\006\053\007\055\010" +
    "\054\011\051\001\002\000\020\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\015\uffe4\001\002\000\012\020" +
    "\uffee\021\uffee\022\uffee\031\uffee\001\002\000\020\005\043" +
    "\006\040\012\045\014\042\027\047\030\041\031\031\001" +
    "\002\000\020\005\043\006\040\012\045\014\042\027\047" +
    "\030\041\031\031\001\002\000\020\005\043\006\040\012" +
    "\045\014\042\027\047\030\041\031\031\001\002\000\020" +
    "\005\043\006\040\012\045\014\042\027\047\030\041\031" +
    "\031\001\002\000\020\005\043\006\040\012\045\014\042" +
    "\027\047\030\041\031\031\001\002\000\020\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\051\015\uffe8\001\002" +
    "\000\020\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\051\015\uffe7\001\002\000\020\004\uffe9\005\uffe9\006\uffe9" +
    "\007\055\010\054\011\051\015\uffe9\001\002\000\020\004" +
    "\uffea\005\uffea\006\uffea\007\055\010\054\011\051\015\uffea" +
    "\001\002\000\020\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\051\015\uffe6\001\002\000\020\005\043\006\040" +
    "\012\045\014\042\027\047\030\041\031\031\001\002\000" +
    "\016\005\052\006\053\007\055\010\054\011\051\015\065" +
    "\001\002\000\020\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\015\uffe5\001\002\000\020\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\015\uffe1\001\002\000" +
    "\016\005\052\006\053\007\055\010\054\011\051\015\070" +
    "\001\002\000\020\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\015\uffe0\001\002\000\020\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\015\uffe2\001\002\000" +
    "\004\031\031\001\002\000\004\015\074\001\002\000\004" +
    "\004\075\001\002\000\012\020\uffed\021\uffed\022\uffed\031" +
    "\uffed\001\002\000\004\004\077\001\002\000\020\003\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7\031\ufff7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\006\002\003\015\004\001\001\000\002\001" +
    "\001\000\006\003\006\016\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\010\001\001\000\004\004" +
    "\011\001\001\000\012\005\012\006\014\012\015\013\020" +
    "\001\001\000\002\001\001\000\004\020\075\001\001\000" +
    "\012\003\035\007\031\011\034\016\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\045\011\043\001\001" +
    "\000\006\010\070\011\043\001\001\000\002\001\001\000" +
    "\006\010\066\011\043\001\001\000\006\010\065\011\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\061" +
    "\011\043\001\001\000\006\010\060\011\043\001\001\000" +
    "\006\010\057\011\043\001\001\000\006\010\056\011\043" +
    "\001\001\000\006\010\055\011\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\063\011\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private PilaTablasSimbolos pila;
private TablaSimbolos ts;
private Simbolo simb;

public static void main(String[] argv){
	if (argv.length == 0) {
		      System.out.println("Uso : java Parser  <inputfile)>");
		    }
	else{
		try {
			java.io.FileInputStream stream = new java.io.FileInputStream(argv[0]);
		    java.io.Reader reader = new java.io.InputStreamReader(stream);
			Scanner analizadorLexico= new Yylex(reader);
			Parser parserObj = new Parser();
			parserObj.setScanner(analizadorLexico);
			parserObj.parse();
		}
		catch(Exception x) {
			x.printStackTrace();
			System.out.println("Error fatal.");
		}
	}
}

// SYNTAX ERRORs
public void syntax_error(Symbol cur_token){
	String msg="[Parser] Error de sintaxis: '"+
		symbl_name_from_id(cur_token.sym)+
		"' en l√≠nea "+cur_token.left+", columna "+cur_token.right+"\n";
	List<Integer> list_of_ids = expected_token_ids();
	LinkedList<String> list = new LinkedList<String>();
	for (Integer token_id : list_of_ids)
		list.add(symbl_name_from_id(token_id));
	msg += "\tTipos de tokens esperados: " + list +"\n";
	System.out.println(msg);
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 pila = new PilaTablasSimbolos(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= NT$0 bloque 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("\n<INICIO DE BLOQUE>"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 	if(ts != null){
			pila.push(ts);
		}
		ts=new TablaSimbolos(pila);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque ::= NT$1 LEFT_BRACE NT$2 decls instrs RIGHT_BRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 	if(pila.size()>0){
			ts=pila.pop();
		} else{
			ts=null;
		}
		System.out.println("<FIN DE BLOQUE>\n");  
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decls ::= decls decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decls ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= tipo ID SEMICOLON 
            {
              Object RESULT =null;
		int t0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	simb=new Simbolo(id0, t0, 0);
	ts.put(simb.nombre, simb); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= error NT$3 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= t_basico t_componente 
            {
              String RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	if(tc == null){
		RESULT = tb;
	}else{
		RESULT = "Array de ("+tc.toString()+", "+tb.toString()+")";
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // t_basico ::= TIPO_INT 
            {
              String RESULT =null;
		 RESULT="TIPO_INT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_basico",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // t_basico ::= TIPO_FLOAT 
            {
              String RESULT =null;
		 RESULT="TIPO_FLOAT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_basico",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // t_componente ::= LEFT_SQBRACKET INTEGER RIGHT_SQBRACKET t_componente 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	if(tc!= null)
		RESULT = "" + String.valueOf(n) + "x" + tc; 
	else
		RESULT = ""+ String.valueOf(n); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_componente",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // t_componente ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("t_componente",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrs ::= instrs instr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instr ::= bloque 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instr ::= factor ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Simbolo f1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	try{
		simb = ts.get(f1.nombre);
		if(simb!=null){
			if(f1.tipo.equals(e.tipo)){
				Number nuevo_valor = e.valor;
				Simbolo simb_aux = new Simbolo(f1.nombre, f1.tipo, nuevo_valor);
				ts.put(f1.nombre, simb_aux);
			} else if(f1.tipo.equals("TIPO_FLOAT") && e.tipo.equals("TIPO_INT")){
				Number nuevo_valor = e.valor.floatValue();
				Simbolo simb_aux = new Simbolo(f1.nombre, f1.tipo, nuevo_valor);
				ts.put(f1.nombre, simb_aux);
			} else {
				System.out.println("Incompatibilidad de tipos: " + f1.nombre+" no es de tipo "+e.tipo+" [linea: "+f1left+", col:"+f1right+"]\n");
			}
		} else
			System.out.println("Variable no declarada: " + f1.nombre+" [linea: "+f1left+", col:"+f1right+"]\n");
	} catch (Exception ex){}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instr ::= PRINT LEFT_PARENTHESIS factor RIGHT_PARENTHESIS SEMICOLON 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo f1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
			try{
		simb = ts.get(f1.nombre);
		if(simb!=null){
			System.out.println(simb);
		} else {
			System.out.println("Variable no declarada: " + f1.nombre+" [linea: "+f1left+", col:"+f1right+"]\n");
		}
	} catch(Exception ex){}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= ID 
            {
              Simbolo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	simb = ts.get(id1);
	if(simb!=null){
		RESULT = simb;
	} else {
		System.out.println("Variable no declarada: " + id1 +" [linea: "+id1left+", col:"+id1right+"]\n");
		RESULT=null;
	} 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= factor 
            {
              Simbolo RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo f1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			try{
		simb=ts.get(f1.nombre);
		if(simb!=null)
			RESULT = simb;
		else {
			System.out.println("Variable no declarada: " + f1 +" [linea: "+f1left+", col:"+f1right+"]\n");
			RESULT=null;
		}
	} catch (Exception ex){
		RESULT=null;
	} 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr PLUS expr 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo e1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			try{
		if((e1.tipo.equals("TIPO_FLOAT")) || (e2.tipo.equals("TIPO_FLOAT"))){
			float res = e1.valor.floatValue() + e2.valor.floatValue();
			RESULT = new Simbolo("", "TIPO_FLOAT", res);
		} else {
			int res = e1.valor.intValue() + e2.valor.intValue();
			RESULT = new Simbolo("", "TIPO_INT", res);
		}
	} catch (Exception ex){
		RESULT=null;
	} 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MINUS expr 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo e1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			try{
		if((e1.tipo.equals("TIPO_FLOAT")) || (e2.tipo.equals("TIPO_FLOAT"))){
			float res = e1.valor.floatValue() - e2.valor.floatValue();
			RESULT = new Simbolo("", "TIPO_FLOAT", res);
		} else {
			int res = e1.valor.intValue() - e2.valor.intValue();
			RESULT = new Simbolo("", "TIPO_INT", res);
		}
	} catch (Exception ex){
		RESULT=null;
	}  

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr TIMES expr 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo e1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			try{
		if((e1.tipo.equals("TIPO_FLOAT")) || (e2.tipo.equals("TIPO_FLOAT"))){
			float res = e1.valor.floatValue() * e2.valor.floatValue();
			RESULT = new Simbolo("", "TIPO_FLOAT", res);
		} else {
			int res = e1.valor.intValue() * e2.valor.intValue();
			RESULT = new Simbolo("", "TIPO_INT", res);
		}
	} catch (Exception ex){
		RESULT=null;
	} 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr DIV expr 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo e1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			try{
		if((e1.tipo.equals("TIPO_FLOAT")) || (e2.tipo.equals("TIPO_FLOAT"))){
			float res = e1.valor.floatValue() / e2.valor.floatValue();
			RESULT = new Simbolo("", "TIPO_FLOAT", res);
		} else {
			int res = e1.valor.intValue() / e2.valor.intValue();
			RESULT = new Simbolo("", "TIPO_INT", res);
		}
	} catch (Exception ex){
		RESULT=null;
	} 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr POW expr 
            {
              Simbolo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Simbolo e1 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e2 = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			try{
		if((e1.tipo.equals("TIPO_FLOAT")) || (e2.tipo.equals("TIPO_FLOAT"))){
			float res = new Float(Math.pow(e1.valor.floatValue(), e2.valor.floatValue()));
			RESULT = new Simbolo("", "TIPO_FLOAT", res);
		} else {
			int res = (int) Math.pow(e1.valor.floatValue(), e2.valor.floatValue());
			RESULT = new Simbolo("", "TIPO_INT", res);
		}
	} catch (Exception ex){
		RESULT=null;
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= SQRT LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			try{
		float valor = new Float(Math.sqrt(e.valor.floatValue()));
		RESULT= new Simbolo("", "TIPO_FLOAT", valor);
	} catch (Exception ex){
		RESULT=null;
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= FLOAT 
            {
              Simbolo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Simbolo("", "TIPO_FLOAT", n.floatValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= INTEGER 
            {
              Simbolo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Number n = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Simbolo("", "TIPO_INT", n.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= MINUS expr 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	try{
		if(e.tipo.equals("TIPO_FLOAT")){
			System.out.println(e.valor);
			float valor = -e.valor.floatValue();
			RESULT= new Simbolo("", "TIPO_FLOAT", valor);	
		} else {
			int valor = -e.valor.intValue();
			RESULT= new Simbolo("", "TIPO_INT", valor);
		}
	} catch(Exception ex){
		RESULT=null;
	}
		

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= PLUS expr 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 try{
		if(e.tipo.equals("TIPO_FLOAT")){
			float valor = e.valor.floatValue();
			RESULT= new Simbolo("", "TIPO_FLOAT", valor);	
		} else {
			int valor = e.valor.intValue();
			RESULT= new Simbolo("", "TIPO_INT", valor);
		}
	} catch(Exception ex){
		RESULT=null;
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LEFT_PARENTHESIS expr RIGHT_PARENTHESIS 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
